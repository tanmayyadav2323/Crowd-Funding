import {
  normalizeChainId
} from "./chunk-ZD2O36CB.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-TJDZPDYI.js";
import {
  DEFAULT_WALLET_API_KEY
} from "./chunk-VXJ5G3H2.js";
import {
  Connector
} from "./chunk-56PDSJSZ.js";
import {
  _defineProperty
} from "./chunk-UZDOK4BQ.js";
import "./chunk-C65FJ6HY.js";
import "./chunk-E3TFATJ7.js";
import "./chunk-7DXY2DX7.js";
import "./chunk-LNXC2PVI.js";
import "./chunk-QBTB3ZCH.js";
import "./chunk-HPIXWYGK.js";
import "./chunk-4G7OA7MY.js";
import "./chunk-XEBWA6A7.js";
import "./chunk-J4OOYIQA.js";
import {
  getChainProvider
} from "./chunk-NYKC5UNG.js";
import "./chunk-XUXNDKXO.js";
import "./chunk-KSBPR6CT.js";
import "./chunk-RUU7QQRD.js";
import "./chunk-BTCESL4W.js";
import "./chunk-24M2PVBU.js";
import "./chunk-RLOYSQMK.js";
import "./chunk-RGAYGF33.js";
import "./chunk-XLOOGUEN.js";
import "./chunk-2O4376VB.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";
import "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js
init_shim();
var _provider = /* @__PURE__ */ new WeakMap();
var _signer = /* @__PURE__ */ new WeakMap();
var LocalWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "local_wallet");
    _defineProperty(this, "name", "Local Wallet");
    _defineProperty(this, "options", void 0);
    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "shimDisconnectKey", "localWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    _classPrivateFieldSet(this, _provider, void 0);
    _classPrivateFieldSet(this, _signer, void 0);
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!_classPrivateFieldGet(this, _provider)) {
      _classPrivateFieldSet(this, _provider, getChainProvider(this.options.chain, {
        thirdwebApiKey: this.options.thirdwebApiKey || DEFAULT_WALLET_API_KEY
      }));
    }
    return _classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    if (!_classPrivateFieldGet(this, _signer)) {
      const provider = await this.getProvider();
      _classPrivateFieldSet(this, _signer, getSignerFromEthersWallet(this.options.ethersWallet, provider));
    }
    return _classPrivateFieldGet(this, _signer);
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    _classPrivateFieldSet(this, _provider, getChainProvider(chain, {
      thirdwebApiKey: this.options.thirdwebApiKey || DEFAULT_WALLET_API_KEY
    }));
    _classPrivateFieldSet(this, _signer, getSignerFromEthersWallet(this.options.ethersWallet, _classPrivateFieldGet(this, _provider)));
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getSignerFromEthersWallet(ethersWallet, provider) {
  if (provider) {
    return ethersWallet.connect(provider);
  }
  return ethersWallet;
}
export {
  LocalWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm-BQYP4WWA.js.map
